.SEGMENT/PM seg_rth;
nop;
nop;
nop;
nop;
nop;
jump start;
.ENDSEG;

.SEGMENT/DM seg_dmda;
.VAR Input[4] = 0x32, 0x43, 0xF6, 0xA8, 
                0x88, 0x5A, 0x30, 0x8D, 
                0x31, 0x31, 0x98, 0xA2, 
                0xE0, 0x37, 0x07, 0x34;
.VAR Key[44] = "ekey.dat";//0x2B7E1516, 0x28AED2A6, 0xABF71588, 0x09CF4F3C;
.VAR Sbox[256] = 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16;
.VAR T0[256] = "tab0.dat";
.VAR T1[256] = "tab1.dat";
.VAR T2[256] = "tab2.dat";
.VAR T3[256] = "tab3.dat";

.VAR e[4];

.ENDSEG;


.SEGMENT/PM seg_pmco;

start:
i0 = Input;
i1 = Key;
i2 = Sbox;
i3 = T0;
i4 = T1;
i5 = T2;
i6 = T3;
i7 = e;





///////////

lcntr = 9, do Rounds until lce;

    lcntr = 16, do SubBytes until lce;
        r0 = dm(i0, 0);
        m0 = r0;
        r0 = dm(m0, i2);
    SubBytes: dm(i0, 1) = r0;
    r0 = dm(i0,-16);


    //////////////ShiftRows
    r0 = dm(1, i0); r1 = dm(5, i0); r2 = dm(9, i0); r3 = dm(0xd, i0);
    dm(1,i0) = r1; dm(5,i0) = r2; dm(9,i0) = r3; dm(0xD,i0) = r0;

    r0 = dm(2, i0); r1 = dm(6, i0); r2 = dm(0xA, i0); r3 = dm(0xE, i0);
    dm(2,i0) = r2; dm(6,i0) = r3; dm(0xA,i0) = r0; dm(0xE,i0) = r1;

    r0 = dm(3, i0); r1 = dm(7, i0); r2 = dm(11, i0); r3 = dm(15, i0);
    dm(3,i0) = r3; dm(7,i0) = r0; dm(11,i0) = r1; dm(15,i0) = r2;


    r4 = 0;
    r5 = 1;
    lcntr = 4, do subRound until lce;
        r0 = 0;
        m0 = r4; r0 = dm(m0,i0); m4 = r0; r0 = dm(m4,i3); 
        r4 = r4 + 1; 
        m1 = r4; r1 = dm(m1,i0); m4 = r1; r1 = dm(m4,i4); 
        r4 = r4 + 1; 
        m2 = r4; r2 = dm(m2,i0); m4 = r2; r2 = dm(m4,i5);
        r4 = r4 + 1; 
        m3 = r4; r3 = dm(m3,i0); m4 = r3; r3 = dm(m4,i6); 
        r5 = dm(i1,1);    
        r6 = r0 xor r1;
        r6 = r6 xor r2;
        r6 = r6 xor r3;
        r6 = r6 xor r5;
        dm(i7,1) = r0;
        r0 = fext r6 by 24:8; dm(m0,i0) = r0;
        r1 = fext r6 by 16:8; dm(m1,i0) = r1;
        r2 = fext r6 by 8:8; dm(m2,i0) = r2;
        r3 = fext r6 by 0:8; dm(m3,i0) = r3;
    subRound: r4 = r4 + 1;
Rounds: r0 = dm(i7,-4);






//r0 = lshift r0 by 11;
//r0 = r0 or lshift r1 by 7;
//r0 = r0 or lshift r2 by 3;
//r0 = r0 or r3;




.ENDSEG;


/////////////////variant1
//Shiftrows
//r4 = 4;
//r5 = 1;
//r6 = 0;
//r7 = 1;
//lcntr = 3, do ShiftRows until lce;
//	m0 = r5; r0 = dm(m0, i0); 
//	r5 = r5 + r4; m1 = r5; r1 = dm(m1, i0);
//	r5 = r5 + r4; m2 = r5; r2 = dm(m2, i0); 
//	r5 = r5 + r4; m3 = r5; r3 = dm(m3, i0);
//	dm(m0,i0) = r1;
//	dm(m1,i0) = r2;
//	dm(m2,i0) = r3;
//	dm(m3,i0) = r0;
//	r6 = r6 + r7;
//ShiftRows: r5 = r6 + r7;

/*
/////////////MixColumn
// u_char mulMas[16] = {
// 0x02, 0x03, 0x01, 0x01,
// 0x01, 0x02, 0x03, 0x01,
// 0x01, 0x01, 0x02, 0x03,
// 0x03, 0x01, 0x01, 0x02
// }

r4 = 0x11B;
r7 = 0;
r8 = 1;
lcntr = 4, do MixColumn until lce;
    m0 = r7; 
    r7 = r7 + r8; m1 = r7;
    r7 = r7 + r8; m2 = r7;
    r7 = r7 + r8; m3 = r7;

    r0 = dm(m0,i0); r1 = dm(m1,i0); r2 = dm(m2,i0); r3 = dm(m3,i0);
    r5 = LSHIFT r0 by 0x1; 
    r6 = lshift r1 by 0x1; r6 = r6 XOR r1;
    r5 = r5 XOR r6; r5 = r5 XOR r2; r5 = r5 XOR r3; r5 = r5 XOR r4;
    dm(m0,i0) = r5;

    r5 = lshift r1 by 0x1;
    r6 = lshift r2 by 0x1; r6 = r6 XOR r2;
    r5 = r5 xor r0; r5 = r5 xor r6; r5 = r5 xor r3; r5 = r5 xor r4;
    dm(m1,i0) = r5;

    r5 = lshift r2 by 0x1;
    r6 = lshift r3 by 0x1; r6 = r6 XOR r3;
    r5 = r5 xor r0; r5 = r5 xor r2; r5 = r5 xor r6; r5 = r5 xor r4;
    dm(m2,i0) = r5;

    r5 = lshift r0 by 0x1; r5 = r0 xor r5;
    r6 = lshift r3 by 0x1;
    r5 = r5 xor r1; r5 = r5 xor r2; r5 = r5 xor r6; r5 = r5 xor r4;
    dm(m3,i0) = r5;
MixColumn: r7 = r7 + r8;

*/






